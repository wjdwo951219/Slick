/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.J_786b676a8e45;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.records.CurrencyUsdKrwRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JCurrencyUsdKrw extends TableImpl<CurrencyUsdKrwRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>786b676a8e45.CURRENCY_USD_KRW</code>
     */
    public static final JCurrencyUsdKrw CURRENCY_USD_KRW = new JCurrencyUsdKrw();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CurrencyUsdKrwRecord> getRecordType() {
        return CurrencyUsdKrwRecord.class;
    }

    /**
     * The column <code>786b676a8e45.CURRENCY_USD_KRW.PRICE</code>.
     */
    public final TableField<CurrencyUsdKrwRecord, String> PRICE = createField(DSL.name("PRICE"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>786b676a8e45.CURRENCY_USD_KRW.PRICE_CHANGE</code>.
     */
    public final TableField<CurrencyUsdKrwRecord, String> PRICE_CHANGE = createField(DSL.name("PRICE_CHANGE"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column
     * <code>786b676a8e45.CURRENCY_USD_KRW.PRICE_CHANGE_PERCENT</code>.
     */
    public final TableField<CurrencyUsdKrwRecord, String> PRICE_CHANGE_PERCENT = createField(DSL.name("PRICE_CHANGE_PERCENT"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>786b676a8e45.CURRENCY_USD_KRW.URL</code>.
     */
    public final TableField<CurrencyUsdKrwRecord, String> URL = createField(DSL.name("URL"), SQLDataType.VARCHAR(500).nullable(false), this, "");

    /**
     * The column <code>786b676a8e45.CURRENCY_USD_KRW.REG_DATETIME</code>.
     */
    public final TableField<CurrencyUsdKrwRecord, LocalDateTime> REG_DATETIME = createField(DSL.name("REG_DATETIME"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>786b676a8e45.CURRENCY_USD_KRW.REG_ID</code>.
     */
    public final TableField<CurrencyUsdKrwRecord, String> REG_ID = createField(DSL.name("REG_ID"), SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>786b676a8e45.CURRENCY_USD_KRW.UPT_DATETIME</code>.
     */
    public final TableField<CurrencyUsdKrwRecord, LocalDateTime> UPT_DATETIME = createField(DSL.name("UPT_DATETIME"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>786b676a8e45.CURRENCY_USD_KRW.UPT_ID</code>.
     */
    public final TableField<CurrencyUsdKrwRecord, String> UPT_ID = createField(DSL.name("UPT_ID"), SQLDataType.VARCHAR(200).nullable(false), this, "");

    private JCurrencyUsdKrw(Name alias, Table<CurrencyUsdKrwRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JCurrencyUsdKrw(Name alias, Table<CurrencyUsdKrwRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>786b676a8e45.CURRENCY_USD_KRW</code> table
     * reference
     */
    public JCurrencyUsdKrw(String alias) {
        this(DSL.name(alias), CURRENCY_USD_KRW);
    }

    /**
     * Create an aliased <code>786b676a8e45.CURRENCY_USD_KRW</code> table
     * reference
     */
    public JCurrencyUsdKrw(Name alias) {
        this(alias, CURRENCY_USD_KRW);
    }

    /**
     * Create a <code>786b676a8e45.CURRENCY_USD_KRW</code> table reference
     */
    public JCurrencyUsdKrw() {
        this(DSL.name("CURRENCY_USD_KRW"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : J_786b676a8e45._786B676A8E45;
    }

    @Override
    public UniqueKey<CurrencyUsdKrwRecord> getPrimaryKey() {
        return Keys.KEY_CURRENCY_USD_KRW_PRIMARY;
    }

    @Override
    public JCurrencyUsdKrw as(String alias) {
        return new JCurrencyUsdKrw(DSL.name(alias), this);
    }

    @Override
    public JCurrencyUsdKrw as(Name alias) {
        return new JCurrencyUsdKrw(alias, this);
    }

    @Override
    public JCurrencyUsdKrw as(Table<?> alias) {
        return new JCurrencyUsdKrw(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JCurrencyUsdKrw rename(String name) {
        return new JCurrencyUsdKrw(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JCurrencyUsdKrw rename(Name name) {
        return new JCurrencyUsdKrw(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JCurrencyUsdKrw rename(Table<?> name) {
        return new JCurrencyUsdKrw(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JCurrencyUsdKrw where(Condition condition) {
        return new JCurrencyUsdKrw(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JCurrencyUsdKrw where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JCurrencyUsdKrw where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JCurrencyUsdKrw where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JCurrencyUsdKrw where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JCurrencyUsdKrw where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JCurrencyUsdKrw where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JCurrencyUsdKrw where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JCurrencyUsdKrw whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JCurrencyUsdKrw whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
